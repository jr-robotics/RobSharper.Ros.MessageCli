using RobSharper.Ros.MessageEssentials;

namespace {{Package.Namespace}}
{
{{#if MessageType.IsMessage}}
    [RosMessage("{{Package.RosName}}/{{RosTypeName}}")]
{{/if}}
{{#if MessageType.IsServiceRequest}}
    [RosServiceMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ServiceMessageKind.Request)]
{{/if}}
{{#if MessageType.IsServiceResponse}}
    [RosServiceMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ServiceMessageKind.Response)]
{{/if}}
{{#if MessageType.IsActionGoal}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Goal)]
{{/if}}
{{#if MessageType.IsActionResult}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Result)]
{{/if}}
{{#if MessageType.IsActionFeedback}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Feedback)]
{{/if}}
    [System.CodeDom.Compiler.GeneratedCodeAttribute("{{{Package.MessageCliToolInfo.ToolName}}}", "{{{Package.MessageCliToolInfo.Version}}}")]
    public class {{TypeName}}
    {
    {{#each Constants}}
        [RosMessageField("{{RosType}}", "{{RosIdentifier}}", {{Index}})]
        public const {{TypeName}} {{Identifier}} = {{formatValue Value}};
    
    {{/each}}
    {{#each Fields}}

        [RosMessageField("{{RosType}}", "{{RosIdentifier}}", {{Index}})]
        public {{{Type.InterfaceName}}} {{Identifier}} { get; set; }
        {{~#if Type.IsString}} = string.Empty;
        {{~else if Type.IsDateTime}} = RosTime.Zero;
        {{~else if Type.IsTimeSpan}} = RosDuration.Zero;
        {{~else if Type.IsArray}} = new {{{Type.ConcreteName}}}();
        {{~else}}
            {{~#unless Type.IsBuiltInType}} = new {{{Type.ConcreteName}}}();{{/unless}}
        {{~/if}}

    {{/each}}

        public {{TypeName}}()
        {
    {{~#each Fields}}
        {{~#if Type.IsFixedSizeArray}}
            {{Identifier}}.PopulateWithInitializedRosValues({{Type.ArraySize}});
        {{/if}}
    
    {{/each}}
        }
    }
}