using System.IO;
using RobSharper.Ros.MessageEssentials;
using RobSharper.Ros.Adapters.UmlRobotics;

// Built in UML Robotics messages are in the root namespace Messages. This conflicts with the
// package root namespace {{Package.Namespace}}.
using UmlRoboticsMessages = Messages;

namespace {{Package.Namespace}}
{
    {{#if MessageType.IsMessage}}
    [RosMessage("{{Package.RosName}}/{{RosTypeName}}")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("{{{Package.MessageCliToolInfo.ToolName}}}", "{{{Package.MessageCliToolInfo.Version}}}")]
    public class {{TypeName}} : RosMessage
    {{/if}}
    {{#if MessageType.IsAction}}
        {{#if MessageType.IsActionGoal}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Goal)]
    [ActionGoalMessage]
        {{/if}}
        {{#if MessageType.IsActionResult}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Result)]
    [ActionResultMessage]
        {{/if}}
        {{#if MessageType.IsActionFeedback}}
    [RosActionMessage("{{Package.RosName}}/{{RosAbstractTypeName}}", ActionMessageKind.Feedback)]
    [ActionFeedbackMessage]
        {{/if}}
    [System.CodeDom.Compiler.GeneratedCodeAttribute("{{{Package.MessageCliToolInfo.ToolName}}}", "{{{Package.MessageCliToolInfo.Version}}}")]
    public class {{TypeName}} : InnerActionMessage
    {{/if}}
    {{#if MessageType.IsService}}
    public partial class {{AbstractTypeName}} {

        {{#if MessageType.IsServiceRequest}}
    [RobSharper.Ros.Adapters.UmlRobotics.UmlRoboticsServiceMessageAttribute("{{Package.RosName}}/{{RosAbstractTypeName}}", ServiceMessageKind.Request)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("{{{Package.MessageCliToolInfo.ToolName}}}", "{{{Package.MessageCliToolInfo.Version}}}")]
    public class Request : RosMessage
        {{/if}}
        {{#if MessageType.IsServiceResponse}}
    [RobSharper.Ros.Adapters.UmlRobotics.UmlRoboticsServiceMessageAttribute("{{Package.RosName}}/{{RosAbstractTypeName}}", ServiceMessageKind.Response)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("{{{Package.MessageCliToolInfo.ToolName}}}", "{{{Package.MessageCliToolInfo.Version}}}")]
    public class Response : RosMessage
        {{/if}}
    {{/if}}
    {
        internal static readonly DescriptorBasedMessageTypeInfoProvider TypeInfoProvider = new DescriptorBasedMessageTypeInfoProvider<{{TypeName}}>();

        {{#each Constants}}
        [RosMessageField("{{RosType}}", "{{RosIdentifier}}", {{Index}})]
        public const {{TypeName}} {{Identifier}} = {{formatValue Value}};
        
        {{/each}}
        {{#each Fields}}
        [RosMessageField("{{RosType}}", "{{RosIdentifier}}", {{Index}})]
        public {{{Type.InterfaceName}}} {{Identifier}} {{~#unless Type.IsBuiltInType}} = new {{{Type.ConcreteName}}}(){{/unless}};
        
        {{/each}}

        public override string MessageType => TypeInfoProvider.TypeInfo.RosType.ToString();

{{#unless MessageType.IsService}}
        public {{TypeName}}()
        {
        }
        
        public {{TypeName}}(byte[] serializedMessage)
        {
            Deserialize(serializedMessage);
        }
        
        public {{TypeName}}(byte[] serializedMessage, ref int currentIndex)
        {
            Deserialize(serializedMessage, ref currentIndex);
        }
{{/unless}}
{{#if MessageType.IsServiceRequest}}
        public Request()
        {
        }
    
        public Request(byte[] serializedMessage)
        {
            Deserialize(serializedMessage);
        }
    
        public Request(byte[] serializedMessage, ref int currentIndex)
        {
            Deserialize(serializedMessage, ref currentIndex);
        }
{{/if}}
{{#if MessageType.IsServiceResponse}}
        public Response()
        {
        }
    
        public Response(byte[] serializedMessage)
        {
            Deserialize(serializedMessage);
        }
    
        public Response(byte[] serializedMessage, ref int currentIndex)
        {
            Deserialize(serializedMessage, ref currentIndex);
        }
{{/if}}
        
        public override string MD5Sum()
        {
            return TypeInfoProvider.TypeInfo.MD5Sum;
        }
        
        public override bool HasHeader()
        {
            return TypeInfoProvider.TypeInfo.MessageDescriptor.HasHader;
        }
        
        // Omitted IsMetaType() because it seems that it is not used anywhere.
        // Whatever IsMetaType() means. It seems that it is indicating, that the message has properties
        // of an external type (i.e. no primitive ROS type, Message of same package or Type defined in
        // MessageBase package.
        
        {{#unless MessageType.IsService}}
        // Omitted IsServiceComponent() because this is only true for .srv messages    
        {{/unless}}
        {{#if MessageType.IsService}}
        public override bool IsServiceComponent()
        {
            return true;
        }
        {{/if}}
        
        public override string MessageDefinition()
        {
            return TypeInfoProvider.TypeInfo.MessageDefinition;
        }

        public override void Deserialize(byte[] serializedMessage, ref int currentIndex)
        {
            var ms = new MemoryStream(serializedMessage, currentIndex, serializedMessage.Length - currentIndex, false);
            var deserialized = RobSharperInfrastructure.Serializer.Deserialize<{{TypeName}}>(ms);
            
            currentIndex = serializedMessage.Length;

            {{#each Fields}}
            {{Identifier}} = deserialized.{{Identifier}};
            {{/each}}
        }
        
        public override byte[] Serialize(bool partofsomethingelse)
        {
            var ms = new MemoryStream();

            RobSharperInfrastructure.Serializer.Serialize(this, ms);
            return ms.ToArray();
        }
        
        public override void Randomize()
        {
            // TODO
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{TypeName}}) obj);
        }

        public override bool Equals(RosMessage obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{TypeName}}) obj);
        }

        protected bool Equals({{TypeName}} other)
        {
            return
            {{#each Fields}}
                {{#if Type.SupportsEqualityComparer}}
                {{Identifier}} == other.{{Identifier}} &&
                {{else}}
                    {{#if Type.IsValueType}}
                {{Identifier}}.Equals(other.{{Identifier}}) &&
                    {{else}}
                Equals({{Identifier}}, other.{{Identifier}}) &&
                    {{/if}}
                {{/if}}
            {{/each}}
                true;
        }

        public override int GetHashCode()
        {
            var hashCode = new SimpleHashCode();
            hashCode.Add(base.GetHashCode());
            {{#each Fields}}
            hashCode.Add({{Identifier}});
            {{/each}}
            return hashCode.ToHashCode();
        }
    }
    {{#if MessageType.IsService}}
    }
    {{/if}}
}