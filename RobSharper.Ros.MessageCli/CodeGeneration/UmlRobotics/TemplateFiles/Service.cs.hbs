using System;
using RobSharper.Ros.MessageEssentials;

namespace {{Package.Namespace}}
{
    public partial class {{ServiceType.TypeName}} : RosService
    {
        private static readonly IRosServiceInfo ServiceInfo = new DescriptorBasedRosServiceInfo(
            RosType.Parse("{{ServiceType.RosTypeName}}"), 
            {{RequestType.TypeName}}.TypeInfoProvider.TypeInfo, 
            {{ResponseType.TypeName}}.TypeInfoProvider.TypeInfo);

        public override string ServiceType
        {
            get { return ServiceInfo.RosType.ToString(); } 
        }

        public {{RequestType.TypeName}} req
        { 
            get { return ({{RequestType.TypeName}})RequestMessage; } 
            set { RequestMessage = (RosMessage)value; }
        }
        
        public {{ResponseType.TypeName}} resp
        {
            get { return ({{ResponseType.TypeName}})ResponseMessage; }
            set { ResponseMessage = (RosMessage)value; }
        }

        public {{ServiceType.TypeName}}()
        {
            InitSubtypes(new {{RequestType.TypeName}}(), new {{ResponseType.TypeName}}());
        }

        public override string MD5Sum() { return ServiceInfo.MD5Sum; }

        public override string ServiceDefinition() { return ServiceInfo.GetServiceDefinition(); }


        public {{ResponseType.TypeName}} Invoke(Func<{{RequestType.TypeName}}, {{ResponseType.TypeName}}> fn, {{RequestType.TypeName}} req)
        {
            RosServiceDelegate rsd = (m) => {
                {{RequestType.TypeName}} r = m as {{RequestType.TypeName}};
                if (r == null)
                    throw new Exception("Invalid Service Request Type");
                return fn(r);
            };
            
            return ({{ResponseType.TypeName}})GeneralInvoke(rsd, (RosMessage)req);
        }
    }
}