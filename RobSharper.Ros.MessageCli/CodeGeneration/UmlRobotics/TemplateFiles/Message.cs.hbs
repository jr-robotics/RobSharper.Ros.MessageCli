using System.IO;
using RobSharper.Ros.MessageBase;
using RobSharper.Ros.Adapters.UmlRobotics;

// Built in UML Robotics messages are in the root namespace Messages. This conflicts with the
// package root namespace {{Package.Namespace}}.
using UmlRoboticsMessages = Messages;

namespace {{Package.Namespace}}
{
    [RosMessage("{{Package.RosName}}/{{RosName}}")]
    {{#if MessageType.IsMessage}}
    public class {{Name}} : RosMessage
    {{/if}}
    {{#if MessageType.IsAction}}
        {{#if MessageType.IsActionGoal}}
    [ActionGoalMessage]
        {{/if}}
        {{#if MessageType.IsActionResult}}
    [ActionResultMessage]
        {{/if}}
        {{#if MessageType.IsActionFeedback}}
    [ActionFeedbackMessage]
        {{/if}}
    public class {{Name}} : InnerActionMessage
    {{/if}}
    {
        private static readonly MessageTypeInfoProvider TypeInfoProvider = new MessageTypeInfoProvider<{{Name}}>();

        {{#each Constants}}
        [RosMessageField({{Index}}, "{{RosType}}", "{{RosIdentifier}}")]
        public const {{TypeName}} {{Identifier}} = {{formatValue Value}};
        
        {{/each}}
        {{#each Fields}}
        [RosMessageField({{Index}}, "{{RosType}}", "{{RosIdentifier}}")]
        public {{{Type.InterfaceName}}} {{Identifier}} { get; set; }
            {{~#unless Type.IsBuiltInType}} = new {{{Type.ConcreteName}}}();{{/unless}}
        
        {{/each}}

        public override string MessageType => TypeInfoProvider.TypeInfo.MessageDescriptor.RosType.ToString();

        public {{Name}}()
        {
        }
        
        public {{Name}}(byte[] serializedMessage)
        {
            Deserialize(serializedMessage);
        }
        
        public {{Name}}(byte[] serializedMessage, ref int currentIndex)
        {
            Deserialize(serializedMessage, ref currentIndex);
        }

        public override string MD5Sum()
        {
            return TypeInfoProvider.TypeInfo.MD5Sum;
        }
        
        public override bool HasHeader()
        {
            return TypeInfoProvider.TypeInfo.MessageDescriptor.HasHader;
        }
        
        // Omitted IsMetaType() because it seems that it is not used anywhere.
        // Whatever IsMetaType() means. It seems that it is indicating, that the message has properties
        // of an external type (i.e. no primitive ROS type, Message of same package or Type defined in
        // MessageBase package.
        
        // Omitted IsServiceComponent() because this is only true for .srv messages
        
        public override string MessageDefinition()
        {
            return TypeInfoProvider.TypeInfo.MessageDefinition;
        }

        public override void Deserialize(byte[] serializedMessage, ref int currentIndex)
        {
            var ms = new MemoryStream(serializedMessage, currentIndex, serializedMessage.Length - currentIndex, false);
            var deserialized = RobSharperInfrastructure.Serializer.Deserialize<{{Name}}>(ms);
            
            currentIndex = serializedMessage.Length;

            {{#each Fields}}
            {{Identifier}} = deserialized.{{Identifier}};
            {{/each}}
        }
        
        public override byte[] Serialize(bool partofsomethingelse)
        {
            var ms = new MemoryStream();

            RobSharperInfrastructure.Serializer.Serialize(this, ms);
            return ms.ToArray();
        }
        
        public override void Randomize()
        {
            // TODO
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{Name}}) obj);
        }

        public override bool Equals(RosMessage obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{Name}}) obj);
        }

        protected bool Equals({{Name}} other)
        {
            return
            {{#each Fields}}
                {{#if Type.SupportsEqualityComparer}}
                {{Identifier}} == other.{{Identifier}} &&
                {{else}}
                    {{#if Type.IsValueType}}
                {{Identifier}}.Equals(other.{{Identifier}}) &&
                    {{else}}
                Equals({{Identifier}}, other.{{Identifier}}) &&
                    {{/if}}
                {{/if}}
            {{/each}}
                true;
        }

        public override int GetHashCode()
        {
            var hashCode = new SimpleHashCode();
            hashCode.Add(base.GetHashCode());
            {{#each Fields}}
            hashCode.Add({{Identifier}});
            {{/each}}
            return hashCode.ToHashCode();
        }
    }
}