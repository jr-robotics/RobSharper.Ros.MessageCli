image: mcr.microsoft.com/dotnet/core/sdk:3.1

stages:
  - test
  - pack
  - integration-test
  - deploy

test cli:
  stage: test
  script:
    - 'cd RobSharper.Ros.MessageCli.Tests'
    - "dotnet test --logger \"junit\" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=\"$PWD/coverage/\" /p:Exclude=\"[xunit*]*%2C[RobSharper.Ros.MessageCli.Tests]*\" /p:ExcludeByAttribute=\"GeneratedCodeAttribute%2CObsolete%2CCompilerGeneratedAttribute\""
    - 'dotnet $(find ~/.nuget/packages/reportgenerator -name ReportGenerator.dll | grep netcoreapp2.1) -reports:coverage/coverage.opencover.xml -targetdir:coverage/report -verbosity:Warning -reporttypes:Html'
  coverage: '/Total\s+\|\s+(\d{0,2}\.\d{1,2}%)/'
  artifacts:
    paths:
      - 'RobSharper.Ros.MessageCli.Tests/coverage'
      - 'RobSharper.Ros.MessageCli.Tests/TestResults/TestResults.xml'
    reports:
      junit: 'RobSharper.Ros.MessageCli.Tests/TestResults/TestResults.xml'
  tags:
    - docker-executor


# Create a versioned NuGet package
# This task is only executed for the branches develop and master as well as version tags
nuget-pack:
  stage: pack
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Packing version $X_CI_VERSION'
    - 'cd RobSharper.Ros.MessageCli'
    - 'dotnet pack -c Release -o ../nuget/ -p:Version=$X_CI_VERSION -p:SymbolPackageFormat=snupkg --include-symbols'
    - 'echo $X_CI_VERSION > ../version.txt'
  artifacts:
    paths:
      - 'nuget'
      - 'RobSharper.Ros.MessageCli/bin/Release/'
      - 'version.txt'
  tags:
    - docker-executor


# Test package generation with built nuget global tool
.generate_msgs:
  stage: integration-test
  tags:
    - docker-executor
  needs:
    - nuget-pack
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'export PATH="$PATH:/root/.dotnet/tools"'
    - 'echo Generating .Net messages for ROS packages'
    - 'echo RobSharper.Ros.MessageCli version: $X_CI_VERSION'
    - 'echo .Net Core version: $(dotnet --version)'
    - 'dotnet tool install --add-source ./nuget -g RobSharper.Ros.MessageCli --version $X_CI_VERSION'
    - 'dotnet rosmsg config feeds add "Robotics BaGet" --source https://robotics-baget.joanneum.at/v3/index.json --protocol 3'
    - 'dotnet rosmsg config feeds'
    - 'dotnet rosmsg build ./RobSharper.Ros.MessageCli.Tests/TestPackages/valid ./ros-nuget-testresults --nupkg'
#  artifacts:
#    paths:
#      - ros-nuget-testresults
#    expire_in: 1 week

test netcoreapp2_1:
  extends: .generate_msgs
  image: mcr.microsoft.com/dotnet/core/sdk:2.1

test netcoreapp3_1:
  extends: .generate_msgs
  image: mcr.microsoft.com/dotnet/core/sdk:3.1

# Deploy to JR BaGet server
# This is done for all pushes of version tags (v*) automatically
# Pushes to the master branch and web pipeline triggers must be deployed manually
.baget_base:
  stage: deploy
  only:
    - develop
    - master
    - /^v.*$/
  variables:
    GIT_STRATEGY: none
  environment:
    name: JR BaGet
    url: https://robotics-baget.joanneum.at/
  script:
    - 'cd nuget'
    - 'dotnet nuget push *.nupkg -s https://robotics-baget.joanneum.at/v3/index.json -k $JR_BAGET_API_KEY'
  tags:
    - docker-executor

baget auto:
  extends: .baget_base
  only:
    - /^v.*$/
  except:
    - web
    - schedules

baget manual:
  extends: .baget_base
  except:
    - /^v.*$/
  when: manual


# Deploy to NuGet.org
# This task has to be triggered manually
#nuget.org:
#  stage: deploy
#  dependencies:
#    - nuget-pack
#  variables:
#    GIT_STRATEGY: none
#  environment:
#    name: NuGet.org
#    url: https://www.nuget.org/
#  only:
#    - master
#    - /^v.*$/
#  script:
#    - 'cd nuget'
#    - 'dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_ORG_API_KEY'
#  tags:
#    - docker-executor
#  when: manual
