using System.IO;
using Joanneum.Robotics.Ros.MessageBase;
using Joanneum.Robotics.Ros.MessageBase.Serialization;
using Joanneum.Robotics.Ros.MessageBase.UmlRobotics;

using UmlRoboticsMessages = Messages;

namespace {{Package.Namespace}}
{
    [RosMessage("{{Package.RosName}}/{{RosName}}")]
    public class {{Name}} : AbstractRosMessage
    {
        {{#each Constants}}
        [RosMessageField({{Index}}, "{{RosType}}", "{{RosIdentifier}}")]
        public const {{TypeName}} {{Identifier}} = {{formatValue Value}};
        
        {{/each}}
        {{#each Fields}}
        [RosMessageField({{Index}}, "{{RosType}}", "{{RosIdentifier}}")]
        public {{{Type.InterfaceName}}} {{Identifier}} { get; set; }
            {{~#unless Type.IsBuiltInType}} = new {{{Type.ConcreteName}}}();{{/unless}}
        
        {{/each}}

        public {{Name}}() : base()
        {
        }
        
        public {{Name}}(byte[] serializedMessage) : base(serializedMessage)
        {
        }
        
        public {{Name}}(byte[] serializedMessage, ref int currentIndex) : base(serializedMessage, ref currentIndex)
        {
        }

        // Omitted IsMetaType() because it seems that it is not used anywhere.
        // Whatever IsMetaType() means. It seems that it is indicating, that the message has properties
        // of an external type (i.e. no primitive ROS type, Message of same package or Type defined in 
        // MessageBase package.

        // Omitted IsServiceComponent() because this is only true for .srv messages

        public override void Deserialize(byte[] serializedMessage, ref int currentIndex)
        {
            var ms = new MemoryStream(serializedMessage, currentIndex, serializedMessage.Length - currentIndex, false);
            var deserialized = RosMessageSerializer.Instance.Deserialize<{{Name}}>(ms);
            
            currentIndex = serializedMessage.Length;

            {{#each Fields}}
            {{Identifier}} = deserialized.{{Identifier}};
            {{/each}}
        }
        
        public override byte[] Serialize(bool partofsomethingelse)
        {
            var ms = new MemoryStream();
            
            RosMessageSerializer.Instance.Serialize(this, ms);
            return ms.ToArray();
        }
        
        public override void Randomize()
        {
            // TODO
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{Name}}) obj);
        }

        public override bool Equals(RosMessage obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{Name}}) obj);
        }

        protected bool Equals({{Name}} other)
        {
            return
            {{#each Fields}}
                {{#if Type.SupportsEqualityComparer}}
                {{Identifier}} == other.{{Identifier}} &&
                {{else}}
                    {{#if Type.IsValueType}}
                {{Identifier}}.Equals(other.{{Identifier}}) &&
                    {{else}}
                Equals({{Identifier}}, other.{{Identifier}}) &&
                    {{/if}}
                {{/if}}
            {{/each}}
                true;
        }

        public override int GetHashCode()
        {
            var hashCode = new SimpleHashCode();
            hashCode.Add(base.GetHashCode());
            {{#each Fields}}
            hashCode.Add({{Identifier}});
            {{/each}}
            return hashCode.ToHashCode();
        }
    }
}